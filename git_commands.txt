# Useful Git Commands from Lynda.com course Learning Git and Github
# https://www.lynda.com/Git-tutorials/Working-staging-environment/409275/416548-4.html?
# autoplay=true

# cd into the directory

cd ~/Desktop/project
git init # make current working directory a git repo. first time you have to set up credentials


ls -la # this lists, (ls) and gives you all the files. 

git add . # add files (unsaved usually, with new changes) to the staging environment to prep for commit

git add file.txt # can add specific file like this, too.

git checkout coolioeditt.txt # reverts to previous saved and staged file. BAsically an "undo".
git status # use this alot!

git commit -m "Committing this revision of coolio file" # now we commit to repo, with a message.

git log  # see the changes that were made, date, time file by whom.
clear

git reset HEAD "coolioeditt.txt" # takes it out of staging, and replacing it. Take things in staging and overriding it in this environment. It ignores revision 2 altogether. We can miss out on revision two, but sometimes we want to just clear out the staging enviornment, as if you never added anything to the staging enviornment. Telling git we never meant to stage that file. 

# Create a repo in GitHub and add all files (do this for RStudio files from iSchool account). 
git remote add origin remote repository URL
# Sets the new remote
git remote -v
# Verifies the new remote U

git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origin

# user: suid.
# pw: leah's pw (easiest) oneexclaim.  
# push q to quit from the git log. 






git log 
git checkout #  pull the commit from the log into the working environment. To go back to that version!

git branch #print the existing branches

git branch alternative # create a new branch. 

# Think of branch as sort of a SAVE point. 

# If you want to work on the current branch ("Alternate Universe") - leave the master branch untouched, and play around in another branch. 

git branch app01 # creat the branch app01 
git checkout app01 # switch to the branch app01 

# Now in this alternative universe, make changes to someCode, save it, then add to the queue. 
git add . 
git commit -m "new revision; app01"
git log

# To get out of the git log after committing, do cntl + z. 


git checkout master # go back to the master branch. 
git log # see how the log doesn't show the changes we made on the app01 branch! Because it is an  # alternative universe. 

# Now we want to bring changed back into master. It merges by bringing everything (changes) from one branch into the current branch: 

git merge app01 # we merge the app01 branch with the master (which we are *master ON currently)

git log # see how the revisions from app01 are now in master. Wowee!

# change the name of the branches: unix uses the -m command (move): Unix does it weird, copy this one to one of another name. 

git branch -m app01 app02 # rename: app01 is the original name app02 is the new name.
git branch # see the change of name.

# Delete a branch: 
git branch -d alt






















































